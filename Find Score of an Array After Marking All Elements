class Solution {
public:

struct ComparePairs {
    bool operator()(const pair<int, int>& p1, const pair<int, int>& p2) {
        // Compare based on the first element
        if (p1.first != p2.first)
            return p1.first > p2.first; // Smallest element first
        // If the first elements are equal, break ties based on the second element
        return p1.second > p2.second; // Smallest element first
    }
};

    long long findScore(vector<int>& nums) {
        priority_queue<pair<int, int>, vector<pair<int, int>>, ComparePairs> pq;
        for(int i = 0;i<nums.size();i++) {
            pq.push({nums[i],i});
        }
        long long count = 0;
        vector <int> m(nums.size(),0);
        while(!pq.empty()) {
            pair <int,int> p = pq.top();
            pq.pop();
            if(m[p.second] == 0) {
                count += p.first;
                int index = p.second;
                m[index] = 1;
                if(index-1>=0) m[index-1] = 1;
                if(index+1 < nums.size()) m[index+1] = 1;
            }

        }
        return count;
    }
};
