class Solution {
public:
    vector <vector <int>> vis;
    int n,m;


    int solve(vector <vector <int>> &matrix,int i,int j,vector <vector <int>> &dp) {
        if(i < 0 || j < 0 || i >= n || j >= m) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        vis[i][j] = 1;
        int ans = 0;
        int row[] = {1, 0, -1, 0};
        int col[] = {0, 1, 0, -1};
        for(int h = 0;h<4;h++) {
            int rowl = i + row[h];
            int coll = j + col[h];
            if(rowl>=0 && coll >= 0 && rowl < n && coll < m && vis[rowl][coll] == 0 && matrix[rowl][coll] > matrix[i][j]) ans = max(ans,1+solve(matrix,rowl,coll,dp));
        }
        vis[i][j] = 0;
        return dp[i][j] = ans;

    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        n = matrix.size();
        m = matrix[0].size();
        vis.resize(n);
        int ans = 0;
        for(int i = 0;i<n;i++) vis[i].resize(m,0);
        vector <vector <int>> dp(n,vector <int> (m,-1));
        for(int i = 0;i<n;i++) {
            for(int j = 0;j<m;j++) {
                vis[i][j] = 1;
                ans = max(ans,1+solve(matrix,i,j,dp));
                vis[i][j] = 0;
            }
        }

        return ans; 

    }
};
