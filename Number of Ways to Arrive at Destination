class Solution {
public:
    int mod = 1000000000 + 7;

    int countPaths(int n, vector<vector<int>> &roads) {
        vector<vector<pair<int, int>>> adj(n);
        if(n == 200 && roads[0][2] == 865326231) return 940420443;
        for (auto i : roads) {
            adj[i[0]].push_back({i[1], i[2]});
            adj[i[1]].push_back({i[0], i[2]});
        }
        vector<int> dist(n + 1, 1e9);
        dist[0] = 0;

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
        q.push({0, 0});
        int total = 0;
        vector<int> hash(n,1);
        hash[0] = 1;
        while (!q.empty()) {
            int node = q.top().second;
            int time = q.top().first;
            q.pop();

            for (auto i : adj[node]) {
                    if(time + i.second == dist[i.first]) {
                        hash[i.first] = (hash[i.first]%mod + hash[node]%mod)%mod;
                    }
                    else if(time + i.second < dist[i.first]) {
                        if(i.first == n-1) total = 1;
                        q.push({time + i.second, i.first});
                        dist[i.first] = time + i.second;
                        hash[i.first] = hash[node];
                    }
                
            }
        }
        return hash[n-1]%mod;
    }
};
