#include <bits/stdc++.h> 

struct Node {
    Node *link[26];
    int countend = 0;
    int countpre = 0;

    void insert(char c,Node *node) {
        link[c-'a'] = node;
    }

    bool contain(char c) {
        return (link[c-'a'] != NULL);
    }

    Node *get(char c) {
        return link[c-'a'];
    }

    void icre_end() {
        countend++;
    }

    void icre_pre() {
        countpre++;
    }

    void reducepre() {
        countpre--;
    }

    void deleteend() {
        countend--;
    }
};

class Trie{
    Node *root;
    public:

    Trie(){
        // Write your code here.
        root = new Node();
    }

    void insert(string &word){
        // Write your code here.
        Node *node = root;
        for(int i = 0;i<word.size();i++) {
            if(!node->contain(word[i])) {
                node->insert(word[i],new Node());
            }
            node = node->get(word[i]);
            node->icre_pre();

        }

        node->icre_end();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        Node *node = root;
        for(auto i:word) {
            if(node->contain(i)) {
                node = node->get(i);
            }
            else return 0;
        }
        return node->countend;
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        Node *node = root;
        for(int i=0;i<word.length();i++) {
            if(node->contain(word[i])) node = node->get(word[i]);
            else return 0;
        }
        return node->countpre;
        
    }

    void erase(string &word){
        // Write your code here.
        Node *node = root;
        for(auto i:word) {
            node = node->get(i);
            node->reducepre();
        }
        node->deleteend();
    }
};
