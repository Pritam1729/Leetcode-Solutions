class Solution {
public:
    int k = 0;
    int pa = 0;
    void dfs2(int &pa,int node,vector <vector <pair <int,int>>> &adj,int sum,vector <int> &vis) {
        vis[node] = 1;
        if(sum != 0 && sum%k == 0) pa++;
        for(auto i:adj[node]) {
            if(vis[i.first] == 0) {
                dfs2(pa,i.first,adj,sum+i.second,vis);
            }
        }
    }
    
    
    int dfs(int node,vector<vector <pair <int,int>>> &adj) {
        vector <int> count;
        int ans = 0;
        for(auto i:adj[node]) {
            int sum = 0;
            vector <int> vis(adj.size(),0);
            vis[node] = 1;
            int pa = 0;
            dfs2(pa,i.first,adj,i.second,vis);
            count.push_back(pa);
        }
        for(int i = 0;i<count.size();i++) {
            for(int j = i+1;j<count.size();j++) {
                ans += count[i] * count[j];
            }
        }
        return ans;
    }
    
    
    vector<int> countPairsOfConnectableServers(vector<vector<int>>& edges, int signalSpeed) {
        vector <vector <pair <int,int>>> adj(edges.size()+1);
        vector <int> ans(edges.size()+1,0);
        k = signalSpeed;
        for(auto i:edges) {
            adj[i[0]].push_back({i[1],i[2]});
            adj[i[1]].push_back({i[0],i[2]});
        }
        for(int i = 0;i<edges.size()+1;i++) {
            if(adj[i].size() == 1) {
                ans[i] = 0;
            }
            else {
                ans[i] = dfs(i,adj);
            }
        }
        return ans;
    }
};
