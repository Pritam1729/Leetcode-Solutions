class Solution {
public:

    bool issafe(int n,int row,int col,vector<vector<char>> output) {
        int i = 0;
        while(i>=0 && i<n){
            if(output[i][col] == 'Q') return false;
            i++;
        }
        i = 0;
        while(i>=0 && i<n){
            if(output[row][i] == 'Q') return false;
            i++;
        }
        int j=col;
        i = row;
        while(i>=0 && j>=0 && j<n && i<n){
            if(output[i][j] == 'Q') return false;
            i++;
            j++;
        }
        j=col;
        i = row;
        while(i>=0 && j>=0 && j<n && i<n){
            if(output[i][j] == 'Q') return false;
            i--;
            j--;
        }
        j=col;
        i = row;
        while(i>=0 && j>=0 && j<n && i<n){
            if(output[i][j] == 'Q') return false;
            i--;
            j++;
        }
        j=col;
        i = row;
        while(i>=0 && j>=0 && j<n && i<n){
            if(output[i][j] == 'Q') return false;
            i++;
            j--;
        }
        return true;

    }

    void solve(int n,int row,vector<vector<char>> output,vector<vector<string>> &ans){
        if(row>=n){
            string s = "";
            vector <string> out;
            for(auto i: output) {
                s = "";
                for(auto j:i) {
                    s+=j;
                }
                out.push_back(s);

            }
            ans.push_back(out);
            return;
        }
        for(int i = 0;i<n;i++){
            if(issafe(n,row,i,output)){
                output[row][i] = 'Q';
                solve(n,row+1,output,ans);
                output[row][i] = '.';
            }
        }
        return;
    }

    vector<vector<string>> solveNQueens(int n) {
        vector <vector<string>> ans;
        vector <char> roww(n,'.');
        vector<vector<char>> output(n,roww);
        int row = 0;
        solve(n,row,output,ans);
        return ans;
    }
};
