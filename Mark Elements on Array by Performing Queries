struct ComparePair {
    bool operator()(const pair<int, int>& p1, const pair<int, int>& p2) {
        if (p1.first == p2.first)
            return p1.second > p2.second;
        return p1.first > p2.first; 
    }
};

class Solution {
public:
    vector<long long> unmarkedSumArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector <int> vis(nums.size());
        vector <long long> ans;
        long long sum = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, ComparePair> pq;
        for(int i = 0;i<nums.size();i++) {
            pq.push({nums[i],i});
        }
        for(auto i:nums) sum += i;
        cout<<sum<<endl;
        for(auto i:queries) {
            int index = i[0];
            int k = i[1];
            if(vis[index] == 0) {
                sum-=nums[index];
                vis[index] = 1;
            }
            while(!pq.empty() && k) {
                if(vis[pq.top().second] == 1) {
                    pq.pop();
                }
                else{
                    vis[pq.top().second] = 1;
                    sum -= pq.top().first;
                    pq.pop();
                    k--;
                }
            }
            ans.push_back(sum);
        }
        return ans;
    }
};
