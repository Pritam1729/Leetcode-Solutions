class Solution {
public:
    int mod = 1000000007;

    vector <int> dis;
    vector <vector <pair <int,int>>> adj;

    int dfs(int node,int n,vector <int> &dp) {
        if(node == n) return 1;
        if(dp[node] != -1) return dp[node];
        int ans = 0;
        for(auto &i:adj[node]) {
            if(dis[node] > dis[i.first]) {
                ans = (ans%mod + dfs(i.first,n,dp)%mod)%mod;
            }
        }
        return dp[node] = ans;
    }

    int countRestrictedPaths(int n, vector<vector<int>>& edges) {
        dis.resize(n+1,INT_MAX);
        dis[n] = 0;
        adj.assign(n+1, vector<pair<int, int>>());
        for(auto &i:edges) {
            adj[i[1]].push_back({i[0],i[2]});
            adj[i[0]].push_back({i[1],i[2]});
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> p;

        p.push({0,n});
        while(!p.empty()) {
            int node = p.top().second;
            int weight = p.top().first;
            p.pop();
            for(auto &i:adj[node]) {
                if(weight + i.second < dis[i.first]) {
                    dis[i.first] = weight + i.second;
                    p.push({dis[i.first],i.first});
                }
            }
        }
        vector <int> dp(n+2,-1);
        return dfs(1,n,dp);
    }
};
