class Solution {
public:
    int nodes = 0;
    void dfs(vector <vector <int>> &adj,map <int,int> &m,vector <int> &vis,int node) {
        vis[node] = 1;
        nodes++;
        for(auto i:adj[node]) {
            if(!m[i] && !vis[i]) {
                dfs(adj,m,vis,i);
            }
        }
        return;
    }

    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {
        vector <vector <int>> adj(n);
        for(auto i:edges) {
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }
        map <int,int> m;
        for(auto i:restricted) m[i]++;
        vector <int> vis(n+1,0);
        dfs(adj,m,vis,0);
        return nodes;
    }
};
