class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        vector <vector <int>> dist(grid.size(),vector <int> (grid[0].size(),1e9));
        if(grid[0][0] != 0) return -1;
        dist[0][0] = 1;
        queue <vector <int>> q;
        // q.push({0,source.first,source.second});
        q.push({1,0,0});
        int rowh[] = {-1,0,1,0,-1,-1,1,1};
        int colh[] = {0,1,0,-1,-1,1,-1,1};
        // int colh[] = {};
        int n = grid.size();
        int m = grid[0].size();
        while(!q.empty()) {
            int dis = q.front()[0];
            int i = q.front()[1];
            int j = q.front()[2];
            q.pop();
            for(int h = 0;h<8;h++) {
                int row = i+rowh[h];
                int col = j+colh[h];
                if(row >= 0 && col>=0 && row<n && col<m && grid[row][col] == 0 && dist[row][col] > 1+dis) {
                    dist[row][col] = dis+1;
                    q.push({dis+1,row,col});
                }
            }
        }
        if(dist[n-1][m-1] != 1e9) return dist[n-1][m-1];
        return -1;
    }
};
