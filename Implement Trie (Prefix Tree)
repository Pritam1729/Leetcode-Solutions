


struct Node {
    Node* link[26];
    bool flag;

    void put(char c,Node *node) {
        link[c - 'a'] = node;
    }

    bool contain(char c) {
        return (link[c-'a'] != NULL);
    }

    Node *get(char c)  {
        return link[c -'a']; 
    }

    void setflag() {
        flag = true;
    }

    bool is_flag() {
        return flag;
    }

};

class Trie {
 private:
        Node *root;
public:
    Trie() {
        root = new Node();
    }
    
    void insert(string word) {
        Node *node = root;
            for(int i = 0;i<word.length();i++) {
                if(!node->contain(word[i])) {
                    node->put(word[i],new Node());
                }
                node = node->get(word[i]);
            }

            node->setflag();
    }
    
    bool search(string word) {
        Node *node = root;
            for(int i = 0;i<word.length();i++) {
                if(!node->contain(word[i])) return false;
                node = node->get(word[i]);
            }
            return node->is_flag();
    }
    
    bool startsWith(string prefix) {
        Node *node = root;
            for(int i = 0;i<prefix.length();i++) {
                if(!node->contain(prefix[i])) return false;
                node = node->get(prefix[i]);
            }
            return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
