class Solution {
private:
    long long func(vector <int> &nums,int mid) {
        long long total = 0;
        for(int i = 0;i<nums.size();i++) {
            total = total + ceil((double)nums[i] / (double)mid);
        }
        return total;
    }

public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int maxx = *max_element(piles.begin(),piles.end());
        int start = 1;
        int end = maxx;
        int count = INT_MAX;
        cout<<func(piles,4);
        while(start <= end) {
            int mid = start + (end - start)/2;
            long long ans = func(piles,mid);
            if(ans <= h) {
                end = mid - 1;
                count = min(count,mid);
            }
            else start = mid + 1;
        }
        return count;
    }
};
