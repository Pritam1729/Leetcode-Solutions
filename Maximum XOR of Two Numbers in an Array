struct Node {
    Node *link[2];

    bool contain(int bit) {
        return (link[bit] != NULL);
    }

    void put(int bit,Node *node) {
        link[bit] = node;
    }

    Node *get(int bit) {
        return link[bit];
    }
};


class Trie {
    Node *root;
public:
    Trie() {
        root = new Node();
    }

    void insert(int num) {
        Node *node = root;
        for(int i = 31;i>=0;i--) {
            int bit = (num>>i)&1;
            if(!(node->contain(bit))) {
                node->put(bit,new Node());
            }
            node = node->get(bit);
        }
    }

    int getmax(int num) {
        Node *node = root;
        int maxx = 0;
        for(int i = 31;i>=0 ;i--) {
            int bit = (num>>i)&1;
            if(node->contain(1-bit)) {
                maxx = maxx | (1<<i);
                node = node->get(1-bit);
            }
            else{
                node = node->get(bit);
            }
        }
        return maxx;

    }

};

class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        Trie trie;
        for(int i =0;i<nums.size();i++) trie.insert(nums[i]);
        int maxx = 0;
        for(int i =0;i<nums.size();i++) {
            maxx = max(maxx,trie.getmax(nums[i]));
        }
        return maxx;
    }
};
