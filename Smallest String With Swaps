class DisJointSet {
    public:
        vector <int> rank,parent,size;
        DisJointSet(int n) {
            rank.resize(n+1,0);
            size.resize(n+1,1);
            parent.resize(n+1);
            for(int i = 0;i<=n;i++) {
                parent[i] = i;
            }
        }
        int findParent(int node) {
            if(parent[node] == node) return node;
            else return parent[node] = findParent(parent[node]);  
        }
        void unionByRank(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(rank[u_parent] < rank[v_parent]) {
                parent[u_parent] = v_parent;
            }

            else if(rank[u_parent] > rank[v_parent]) {
                parent[v_parent] = u_parent;
            }

            else {
                parent[v_parent] = u_parent;
                rank[u_parent]++;
            }
        }

        void unionBySize(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(size[u_parent] < size[v_parent]) {
                parent[u_parent] = v_parent;
                size[v_parent]+=size[u_parent];
            }

            else if(size[u_parent] > size[v_parent]) {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }

            else {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }
        }

};

class Solution {
public:
    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {
        // if(pairs.size() > 0 && pairs[0][0] == 14169) return "abc";
        int n = s.length();
        DisJointSet ds(n+1);
        for(auto i :pairs) {
            if(ds.findParent(i[0]) != ds.findParent(i[1]))
                        ds.unionByRank(i[0],i[1]);
        }
        map <int,pair <vector <int>,vector <char>>> m;

        for(int i = 0;i<n;i++) {
            int parent = ds.findParent(i);
            m[parent].first.push_back(i);
            m[parent].second.push_back(s[i]);
        }

        for(auto i:m) {
            vector <char> ch = i.second.second;
            vector <int> index = i.second.first;
            sort(ch.begin(),ch.end());

            for(int j = 0;j<index.size();j++) {
                s[index[j]] = ch[j];
            }
        }
        return s;
    }
};
