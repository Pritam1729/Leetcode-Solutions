class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector <vector <pair <int,int>>> adj(n+1);
        vector <int> vis(n+1,INT_MAX);
        vis[k] = 0;
        for(auto i:times) {
            adj[i[0]].push_back({i[1],i[2]});
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
        int count = -1;
        q.push({0,k});
        while(!q.empty()) {
            pair<int,int> node = q.top();
            q.pop();
            for(auto i:adj[node.second]) {
                if(i.second + node.first < vis[i.first]) {
                    vis[i.first] = i.second + node.first;
                    q.push({vis[i.first],i.first});
                }
            }
        }
        int len = 1;
        for(int i = 1;i<=n;i++) {
            if(i!=k && vis[i]!=INT_MAX) {
                len++;
                count = max(count,vis[i]);
            }
        }
        if(len == n)
            return count;
        return -1;

    }
};
