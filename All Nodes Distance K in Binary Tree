/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode *node,int k,vector <int> &ans,map <TreeNode *,int> &vis,map <TreeNode *,vector <TreeNode *>> &m) {
        vis[node] = 1;
        if(!k) ans.push_back(node->val);
        for(auto i:m[node]) {
            if(!vis[i]) {
                dfs(i,k-1,ans,vis,m);
            }
        }
        return;
    }

    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        map <TreeNode *,vector <TreeNode *>> m;
        queue <TreeNode *> q;
        q.push(root);
        while(!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            if(node->left) {
                m[node].push_back(node->left);
                m[node->left].push_back(node);
                q.push(node->left);
            }
            if(node->right) {
                m[node].push_back(node->right);
                m[node->right].push_back(node);
                q.push(node->right);
            }
        }
        vector <int> ans;
        map <TreeNode *,int> vis;
        dfs(target,k,ans,vis,m);
        return ans;
    }
};
