class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
    int n = matrix.size();
    int m = matrix[0].size();
    
    vector<vector<int>> dp(n, vector<int>(m, 0));
    for (int j = 0; j < m; ++j) {
        dp[n-1][j] = matrix[n-1][j];
    }
    for (int i = n - 2; i >= 0; --i) {
        for (int j = 0; j < m; ++j) {
            if(j == 0 && j == m-1) {
                dp[i][j] = matrix[i][j] + dp[i][j];
            }
            else if(j == 0) {
                dp[i][j] = matrix[i][j] + min(dp[i+1][j], dp[i+1][j+1]);
            }
            else if(j == m-1) dp[i][j] = matrix[i][j] + min(dp[i+1][j],dp[i+1][j-1]);
            else dp[i][j] = matrix[i][j] + min(dp[i+1][j], min(dp[i+1][j+1], dp[i+1][j-1]));
        }
    }

    int minn = dp[0][0];
    for (int j = 1; j < m; ++j) {
        minn = min(minn, dp[0][j]);
    }

    return minn;
}

};
