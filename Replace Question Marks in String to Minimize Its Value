struct ComparePair {
    bool operator()(const pair<int, char>& p1, const pair<int, char>& p2) {
        if (p1.first == p2.first)
            return (p1.second-'a') > (p2.second-'a'); 
        return p1.first > p2.first; 
    }
};

class Solution {
public:
    string minimizeStringValue(string s) {
        string ans = "";
        priority_queue<pair<int, char>, vector<pair<int, char>>, ComparePair> pq;

        map <char,int> m;
        for(int i = 0;i<s.length();i++) {
            if(s[i] != '?') m[s[i]]++;
        }
        
        for(int i = 0;i<26;i++) {
            if(m.find('a' + i) != m.end()) {
                pq.push({m['a' + i],'a' + i});
            }
            else{
                pq.push({0,'a' + i});
            }
        }
        for(int i = 0;i<s.length();i++) {
            if(s[i] != '?') {
                // ans += s[i];
                int k = 0;
            }
            else{
                char sh = pq.top().second;
                int level = pq.top().first;
                ans += sh;
                pq.pop();
                pq.push({level+1,sh});
            }
        }
        sort(ans.begin(),ans.end());
        int j = 0;
        for(int i = 0;i<s.length();i++) {
            if(s[i] == '?') {
                s[i] = ans[j++];
            }
        }
        return s;
    }
};
