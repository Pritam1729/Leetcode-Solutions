class DisJointSet {
    vector <int> rank,parent,size;

    public:
        DisJointSet(int n) {
            rank.resize(n+1,0);
            size.resize(n+1,1);
            parent.resize(n+1);
            for(int i = 0;i<=n;i++) {
                parent[i] = i;
            }
        }
        int findParent(int node) {
            if(parent[node] == node) return node;
            else return parent[node] = findParent(parent[node]);  //path compression
        }
        void unionByRank(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(rank[u_parent] < rank[v_parent]) {
                parent[u_parent] = v_parent;
            }

            else if(rank[u_parent] > rank[v_parent]) {
                parent[v_parent] = u_parent;
            }

            else {
                parent[v_parent] = u_parent;
                rank[u_parent]++;
            }
        }

        void unionBySize(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(size[u_parent] < size[v_parent]) {
                parent[u_parent] = v_parent;
                size[v_parent]+=size[u_parent];
            }

            else if(size[u_parent] > size[v_parent]) {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }

            else {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }
        }

};


class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        DisJointSet ds(isConnected.size());
        vector <pair <int,int>> edges;

        for(int i = 0;i<isConnected.size();i++) {
            for(int j = 0;j<isConnected[0].size();j++) {
                if(isConnected[i][j] == 1) {
                    edges.push_back({i,j});
                }
            }
        }
        int pro = 0;
        // vector <int> hash(isConnected.size(),0);
        for(auto i:edges) {
            if(ds.findParent(i.first) != ds.findParent(i.second)) {
                ds.unionBySize(i.first,i.second);
            }
        }
        for(int i = 0;i<isConnected.size();i++) {
            if(ds.findParent(i) == i) {
                pro++;
            }
        }
        return pro;

    }
};
