class DisJointSet {

    public:
        vector <int> rank,parent,size;
        DisJointSet(int n) {
            rank.resize(n+1,0);
            size.resize(n+1,1);
            parent.resize(n+1);
            for(int i = 0;i<=n;i++) {
                parent[i] = i;
            }
        }
        int findParent(int node) {
            if(parent[node] == node) return node;
            else return parent[node] = findParent(parent[node]);  //path compression
        }
        void unionByRank(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(rank[u_parent] < rank[v_parent]) {
                parent[u_parent] = v_parent;
            }

            else if(rank[u_parent] > rank[v_parent]) {
                parent[v_parent] = u_parent;
            }

            else {
                parent[v_parent] = u_parent;
                rank[u_parent]++;
            }
        }

        void unionBySize(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(size[u_parent] < size[v_parent]) {
                parent[u_parent] = v_parent;
                size[v_parent]+=size[u_parent];
            }

            else if(size[u_parent] > size[v_parent]) {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }

            else {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }
        }

};


class Solution {
  public:
    int MaxConnection(vector<vector<int>>& grid) {
        // code here
        DisJointSet ds(grid.size()*grid[0].size() + 1);
        int rowl[] = {-1,1,0,0};
        int coll[] = {0,0,-1,1};
        int n = grid.size();
        int m = grid[0].size();
        for(int i = 0;i<n;i++) {
            for(int j = 0;j<m;j++) {
                if(grid[i][j]) {
                    int pos = i * m + j;
                    for(int h = 0;h<4;h++) {
                        int row = i + rowl[h];
                        int col = j + coll[h];
                        if(row >=0 && col >= 0 && row < n && col < m) {
                            int pos2 = row * m + col;
                            if(grid[row][col]) {
                                if(ds.findParent(pos2) != ds.findParent(pos)) {
                                    ds.unionBySize(pos2,pos);
                                }
                            }
                        }
                    }
                }
            }
        }
        int count = 0;
        for(int i = 0;i<n;i++) {
            for(int j = 0;j<m;j++) {
                if(!grid[i][j]) {
                    int temp = 0;
                    int pos = i * m + j;
                    set <int> s;
                    for(int h = 0;h<4;h++) {
                        int row = i + rowl[h];
                        int col = j + coll[h];
                        if(row >= 0 && col >=0 && row < n && col < m && grid[row][col]) {
                            int pos2 = row * m + col;
                            s.insert(ds.findParent(pos2));
                        }
                    }
                    for(auto i:s) {
                        temp += ds.size[i];
                    }
                    count = max(count,temp+1);
                }
            }
        }
        if(count) return count;
        for(int i = 0;i<n*m;i++)  count = max(count,ds.size[i]);
        return count;
        
        
    }
};
