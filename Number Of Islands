class DisJointSet {

    public:
    vector <int> rank,parent,size;
        DisJointSet(int n) {
            rank.resize(n+1,0);
            size.resize(n+1,1);
            parent.resize(n+1);
            for(int i = 0;i<=n;i++) {
                parent[i] = i;
            }
        }
        int findParent(int node) {
            if(parent[node] == node) return node;
            else return parent[node] = findParent(parent[node]);  //path compression
        }
        void unionByRank(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(rank[u_parent] < rank[v_parent]) {
                parent[u_parent] = v_parent;
            }

            else if(rank[u_parent] > rank[v_parent]) {
                parent[v_parent] = u_parent;
            }

            else {
                parent[v_parent] = u_parent;
                rank[u_parent]++;
            }
        }

        void unionBySize(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(size[u_parent] < size[v_parent]) {
                parent[u_parent] = v_parent;
                size[v_parent]+=size[u_parent];
            }

            else if(size[u_parent] > size[v_parent]) {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }

            else {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }
        }

};

class Solution {
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        // code here
        // int count = 0;
        vector <int> hash(n*m+1,0);
        DisJointSet ds(n*m + 1);
        // int vis[n][m];
        // memset(vis,0,sizeof vis);
        vector <vector <int>> vis(n,vector <int> (m,0));
        int count = 0;
        vector <int> ans;
        int rowh[] = {1,0,-1,0};
        int colh[] = {0,1,0,-1};
        for(auto it:operators) {
            int row = it[0];
            int col = it[1];
            if(vis[row][col]) {
                ans.push_back(count);
                continue;
            }
            vis[row][col] = 1;
            count++;
            int pos = row*m + col;
            for(int i = 0;i<4;i++) {
                int rowl = row + rowh[i];
                int coll = col + colh[i];
                int pos2 = rowl * m + coll;
                if(rowl >= 0 && coll >= 0 && rowl < n && coll < m) {
                    if(vis[rowl][coll] == 1 && ds.findParent(pos2) != ds.findParent(pos)) {
                        count--;
                        ds.unionByRank(pos2,pos);
                    }
                }
            }
            ans.push_back(count);
            
        }
        return ans;
    }
};
