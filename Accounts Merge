class DisJointSet {
    vector <int> rank,parent,size;

    public:
        DisJointSet(int n) {
            rank.resize(n+1,0);
            size.resize(n+1,1);
            parent.resize(n+1);
            for(int i = 0;i<=n;i++) {
                parent[i] = i;
            }
        }
        int findParent(int node) {
            if(parent[node] == node) return node;
            else return parent[node] = findParent(parent[node]);  //path compression
        }
        void unionByRank(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(rank[u_parent] < rank[v_parent]) {
                parent[u_parent] = v_parent;
            }

            else if(rank[u_parent] > rank[v_parent]) {
                parent[v_parent] = u_parent;
            }

            else {
                parent[v_parent] = u_parent;
                rank[u_parent]++;
            }
        }

        void unionBySize(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(size[u_parent] < size[v_parent]) {
                parent[u_parent] = v_parent;
                size[v_parent]+=size[u_parent];
            }

            else if(size[u_parent] > size[v_parent]) {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }

            else {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }
        }

};

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        DisJointSet ds(n);
        unordered_map <string,int> m;
        for(int i = 0;i<n;i++) {
            for(int j = 1;j<accounts[i].size();j++) {
                string mail = accounts[i][j];
                if(m.count(mail) == 0) m[mail] = i;
                else{
                    ds.unionByRank(m[mail],i);
                }
            }
        }
        vector <vector <string>> ans(n);

        for(auto i:m) {
            string mail = i.first;
            int node = ds.findParent(i.second);
            ans[node].push_back(mail);
        }

        vector <vector <string>> ans2;

        for(int i = 0;i<n;i++) {
            if(ans[i].size() != 0) {
                vector <string> temp;
                sort(ans[i].begin(),ans[i].end());
                temp.push_back(accounts[i][0]);
                for(auto j:ans[i]) temp.push_back(j);
                ans2.push_back(temp);
            }
            
        }
        return ans2;
    }
};
