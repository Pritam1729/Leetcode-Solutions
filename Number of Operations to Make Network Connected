class DisJointSet {
    vector <int> rank,parent,size;

    public:
        DisJointSet(int n) {
            rank.resize(n+1,0);
            size.resize(n+1,1);
            parent.resize(n+1);
            for(int i = 0;i<=n;i++) {
                parent[i] = i;
            }
        }
        int findParent(int node) {
            if(parent[node] == node) return node;
            else return parent[node] = findParent(parent[node]);  //path compression
        }
        void unionByRank(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(rank[u_parent] < rank[v_parent]) {
                parent[u_parent] = v_parent;
            }

            else if(rank[u_parent] > rank[v_parent]) {
                parent[v_parent] = u_parent;
            }

            else {
                parent[v_parent] = u_parent;
                rank[u_parent]++;
            }
        }

        void unionBySize(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(size[u_parent] < size[v_parent]) {
                parent[u_parent] = v_parent;
                size[v_parent]+=size[u_parent];
            }

            else if(size[u_parent] > size[v_parent]) {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }

            else {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }
        }

};


class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        DisJointSet ds(n+1);
        int count = 0;
        for(auto i:connections) {
            if(ds.findParent(i[0]) != ds.findParent(i[1])) ds.unionByRank(i[0],i[1]);
            else count++;
        }
        set <int> s;
        
        int conn = 0;
        for(int i = 0;i<n;i++) {
            if(s.count(ds.findParent(i)) == 0) {
                conn++;
                s.insert(ds.findParent(i));
            }
        }
        // cout<<count<<" "<<conn<<endl;
        if(count >= conn-1) return conn-1;
        return -1;
    }
};
