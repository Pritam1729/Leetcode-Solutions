/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *build(map <int,int> &m,vector <int> &inorder,vector <int> &postorder,int ins,int ine,int pres,int pree) {
        if(ins > ine || pres > pree) return NULL;
        TreeNode *root = new TreeNode(postorder[pree]);
        int rooti = m[root->val];
        int size = ine - rooti;
        root->left = build(m,inorder,postorder,ins,rooti-1,pres,pree - size - 1);
        root->right = build(m,inorder,postorder,rooti+1,ine,pree - size,pree-1);
        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map <int,int> m;
        for(int i = 0;i<inorder.size();i++) m[inorder[i]] = i;
        // reverse(postorder.begin(),postorder.end());
        TreeNode *root = build(m,inorder,postorder,0,inorder.size()-1,0,postorder.size()-1);
        return root;
    }
};
