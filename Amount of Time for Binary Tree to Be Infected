/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void inorder(TreeNode *root,map <int,vector <int>> &m) {
        if(root == NULL) return;
        if(root->left != NULL) {
            m[root->val].push_back(root->left->val);
            m[root->left->val].push_back(root->val);
            inorder(root->left,m);
        }
        if(root->right != NULL) {
            m[root->val].push_back(root->right->val);
            m[root->right->val].push_back(root->val);
            inorder(root->right,m);
        }
        return;
    }

public:
    int amountOfTime(TreeNode* root, int start) {
        map <int,vector <int>> adj;
        queue <pair <int,int>> q;
        q.push({start,0});
        inorder(root,adj);
        map <int,int> vis;
        vis[start] = 1;
        int count = 0;
        while(!q.empty()){
            int ele = q.front().first;
            count = q.front().second;
            q.pop();
            for(auto i:adj[ele]) {
                if(!vis[i]) {
                    q.push({i,count+1});
                    vis[i] = 1;
                }
            }
        }
        return count;
    }
};
