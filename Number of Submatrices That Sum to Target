class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map <int,int> m;
        m[0] = 1;
        int sum = 0;
        int count = 0;
        for(int i = 0;i<nums.size();i++) {
            sum += nums[i];
            if(m.find(sum - k) != 0) {
                count += m[sum-k];
            }
            m[sum]++;
        }
        return count;
    }

    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        int count = 0;
        for(int i = 0;i<n;i++) {
            vector <int> vec(m,0);
            for(int j = i;j<n;j++) {
                for(int k = 0;k<m;k++) {
                    vec[k] += matrix[j][k];
                }
                count += subarraySum(vec,target);
            }
        }
        return count;
    }
};
