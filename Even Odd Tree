/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        int i = 0;
        queue <TreeNode *> q;
        q.push(root);
        while(!q.empty()) {
            int len = q.size();
            if(i == 0) {
                TreeNode* pre = q.front();
                if(pre->val%2 == 0) return false;
                if(pre->left) q.push(pre->left);
                if(pre->right) q.push(pre->right);
                q.pop();
                len--;
                for(int i = 0;i<len;i++) {
                    if((q.front()->val)%2 == 0 || q.front()->val <= pre->val)
                        return false;
                    pre = q.front();
                    if(pre->left) q.push(pre->left);
                    if(pre->right) q.push(pre->right);
                    q.pop();
                }
            }
            else{
                TreeNode *pre = q.front();
                q.pop();
                len--;
                if(pre->val%2 == 1) return false;
                if(pre->left) q.push(pre->left);
                if(pre->right) q.push(pre->right);
                for(int i = 0;i<len;i++) {
                    TreeNode *node = q.front();
                    q.pop();
                    if(node->val%2 == 1 || node->val >= pre->val) return false;
                    pre = node;
                    if(pre->left) q.push(pre->left);
                    if(pre->right) q.push(pre->right);
                }
            }
            i = !i;
        }
        return true;
    }
};
