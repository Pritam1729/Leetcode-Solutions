/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack <int> s1;
        stack <int> s2;
        while(l1!=NULL){
            s1.push(l1->val);
            l1 = l1->next;
        }
        while(l2!=NULL){
            s2.push(l2->val);
            l2 = l2->next;
        }
        int carry = 0;
        vector <int> v;
        int sum;
        while(!s1.empty() && !s2.empty()) {
            sum = s1.top() + s2.top() + carry;
            if(sum>=10){
                v.push_back(sum-10);
                carry = 1;
            }
            else {
                v.push_back(sum);
                carry = 0;
            }
            s1.pop();
            s2.pop();
        }
        if(!s1.empty()) {
            while(!s1.empty()){
                sum = carry + s1.top();
                if(sum>=10) {
                    v.push_back(sum-10);
                    carry = 1;
                }
                else{
                    v.push_back(sum);
                    carry = 0;
                }
                s1.pop();
            }
        }
        else{
            while(!s2.empty()){
                sum = carry + s2.top();
                if(sum>=10) {
                    v.push_back(sum-10);
                    carry = 1;
                }
                else{
                    v.push_back(sum);
                    carry = 0;
                }
                s2.pop();
            }
        }
        if(carry == 1) v.push_back(carry);
        for(int i = 0;i<v.size();i++) cout<<v[i]<<" ";
        l1 = NULL;
        ListNode *temp;
        for(int i = v.size()-1;i>=0;i--) {
            if(l1 == NULL) {
                l1 = new ListNode(v[i]);
                temp = l1;
            }
            else{
                temp->next = new ListNode(v[i]);
                temp = temp->next;
            }
        }
        return l1;
    }
};
