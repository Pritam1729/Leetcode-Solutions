class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector <pair <int,int>> dist(n);
        for(int i = 0;i<n;i++) {
            dist[i].first = 1e9;
            dist[i].second = k+1;
        }
        queue <pair<int,pair<int,int>>> q;
        q.push({0,{0,src}});
        vector <vector <pair<int,int>>> adj(n);
        for(int i = 0;i<flights.size();i++) {
            adj[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }
        while(!q.empty()) {
            int node = q.front().second.second;
            int cost = q.front().second.first;
            int stop = q.front().first;
            q.pop();
            for(auto i:adj[node]) {
                if(cost+i.second < dist[i.first].first && stop+1 <= k+1) {

                    dist[i.first].first = cost + i.second;
                    dist[i.first].second = stop+1;
                    q.push({stop+1,{dist[i.first].first,i.first}});
                }
            }
        }
        if(dist[dst].first != 1e9) return dist[dst].first;
        return -1;
    }
};
