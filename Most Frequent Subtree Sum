/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map <int,int> m;

    int max_fre = 0;

    int solve(TreeNode *root) {
        if(!root) return 0;
        int sub_sum = root->val + solve(root->left) + solve(root->right);
        m[sub_sum]++;
        max_fre = max(m[sub_sum],max_fre);
        return sub_sum;
    }

    vector<int> findFrequentTreeSum(TreeNode* root) {
        solve(root);
        vector <int> ans;
        for(auto i:m) {
            if(i.second == max_fre)
                ans.push_back(i.first);
        }
        return ans;
    }
};
