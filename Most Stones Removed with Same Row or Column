class DisJointSet {

    public:
    vector <int> rank,parent,size;

        DisJointSet(int n) {
            rank.resize(n+1,0);
            size.resize(n+1,1);
            parent.resize(n+1);
            for(int i = 0;i<=n;i++) {
                parent[i] = i;
            }
        }
        int findParent(int node) {
            if(parent[node] == node) return node;
            else return parent[node] = findParent(parent[node]);  //path compression
        }
        void unionByRank(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(rank[u_parent] < rank[v_parent]) {
                parent[u_parent] = v_parent;
            }

            else if(rank[u_parent] > rank[v_parent]) {
                parent[v_parent] = u_parent;
            }

            else {
                parent[v_parent] = u_parent;
                rank[u_parent]++;
            }
        }

        void unionBySize(int u,int v) {
            int u_parent = findParent(u);
            int v_parent = findParent(v);

            if(size[u_parent] < size[v_parent]) {
                parent[u_parent] = v_parent;
                size[v_parent]+=size[u_parent];
            }

            else if(size[u_parent] > size[v_parent]) {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }

            else {
                parent[v_parent] = u_parent;
                size[u_parent]+=size[v_parent];
            }
        }

};


class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        int maxrow = 0;
        int maxcol = 0;
        for(auto i:stones) {
            maxrow = max(maxrow,i[0]);
            maxcol = max(maxcol,i[1]);
        }
        DisJointSet ds(maxrow + maxcol + 1);
        unordered_map <long long,long long> stone;
        for(auto i: stones) {
            long long row = i[0];
            long long col = i[1] + maxrow + 1;
            ds.unionByRank(row,col);
            stone[row] = 1;
            stone[col] = 1;
        }
        long long count = 0;
        for(auto i:stone) {
            if(ds.findParent(i.first) == i.first) count++;
        }
        return n-count;


    }
};
