/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack <int> s1;
        stack <int> s2;
        vector <int> a1,b1;
        while(l1!=NULL){
            a1.push_back(l1->val);
            l1 = l1->next;
        }
        while(l2!=NULL) {
            b1.push_back(l2->val);
            l2 = l2->next;
        }
        reverse(a1.begin(),a1.end());
        reverse(b1.begin(),b1.end());
        for(int i = 0;i<a1.size();i++) s1.push(a1[i]);
        for(int i = 0;i<b1.size();i++) s2.push(b1[i]);
        vector <int> a;
        int carry = 0;
        int sum = 0;
        while(!s1.empty() && !s2.empty()) {
            sum = s1.top() + s2.top() + carry;
            if(sum>=10){
                a.push_back(sum-10);carry = 1;
            }
            else{
                a.push_back(sum);carry = 0;
            }
            s1.pop();s2.pop();
        }
        if(!s1.empty()) {
            while(!s1.empty()) {
                sum = s1.top() + carry;
                if(sum>=10){
                    a.push_back(sum-10);carry = 1;
                }
                else{
                    a.push_back(sum);carry = 0;
                }
                s1.pop();
            }
        }
        else{
            while(!s2.empty()) {
                sum = s2.top() + carry;
                if(sum>=10){
                    a.push_back(sum-10);carry = 1;
                }
                else{
                    a.push_back(sum);carry = 0;
                }
                s2.pop();
            }
        }
        if(carry) a.push_back(1);
        ListNode* head = NULL;
        ListNode* temp;
        for(int i = 0;i<a.size();i++) {
            if(head == NULL) {
                head = new ListNode(a[i]);
                temp = head;
            }
            else{
                temp->next = new ListNode(a[i]);
                temp = temp->next;
            }
        }
        return head;
    }
};
